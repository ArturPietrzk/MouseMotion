#include <iostream>
#include <stdio.h>
#include <GL/glew.h>
#include <SFML/Window.hpp>



using namespace std;

// Kody shaderów
const GLchar* vertexSource = R"glsl(
#version 150 core
in vec2 position;
in vec3 color;
out vec3 Color;
void main(){
Color = color;
gl_Position = vec4(position,0.0, 1.0);
}
)glsl";

const GLchar* fragmentSource = R"glsl(
#version 150 core
in vec3 Color;
out vec4 outColor;
void main()
{
outColor = vec4(Color, 1.0);
}
)glsl";

void tworzenieFigury(GLuint vbo, int punkty_)
{
    GLfloat* vertices = new GLfloat[punkty_ * 6];

    float dalfa = 2 * 3.1415 / punkty_;
    float alfa = 0;
    float R = 1;

    for (int i = 0; i < punkty_ * 6; i += 6)
    {
        vertices[i] = R * cos(alfa);
        vertices[i + 1] = R * sin(alfa);
        vertices[i + 2] = 0;

        vertices[i + 3] = (sin(alfa) + 1) / 2.0;
        vertices[i + 4] = (sin(alfa) + 1) / 2.0;
        vertices[i + 5] = (cos(alfa) + 1) / 2.0;
        alfa += dalfa;
    }

    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices) * 6 * punkty_, vertices, GL_STATIC_DRAW);
    delete vertices;
}

 
int main()
{

    
    sf::ContextSettings settings;
    settings.depthBits = 24;
    settings.stencilBits = 8;
     
    // Okno renderingu
    sf::Window window(sf::VideoMode(800, 600, 32), "OpenGL", sf::Style::Titlebar | sf::Style::Close, settings);

    // Inicjalizacja GLEW
    glewExperimental = GL_TRUE;
    glewInit();

    // Utworzenie VAO (Vertex Array Object)
    GLuint vao;
    glGenVertexArrays(1, &vao);
    glBindVertexArray(vao);

    // Utworzenie VBO (Vertex Buffer Object)
    // i skopiowanie do niego danych wierzchołkowych
    //GLuint vbo;
   // glGenBuffers(1, &vbo);
    // GLuint buffer=0;
     //glGenBuffers(1, &buffer);

     
   // GLuint punkty_=6;
    // Współrzędne kwadratu, brak zastosowania bufora, występują powtórzenia wierzchołków
    //GLfloat* vertices = new GLfloat[punkty_ * 6];
    GLuint vbo;
    glGenBuffers(1, &vbo);
    GLenum figura = GL_POINTS;
    int punkty_ = 8;

    tworzenieFigury(vbo, punkty_);
    
   
    
    /*GLfloat vertices[] = {

        
        //1 trojkat
       -0.5f,  0.5f, 1.0f, 0.0f, 0.0f, // lewy-gorny
     0.5f,  0.5f, 0.0f, 1.0f, 0.0f, // prawy-gorny
     0.5f, -0.5f, 0.0f, 0.0f, 1.0f, // prawy-dolny

        //2 trojkat
     0.5f, -0.5f, 0.0f, 0.0f, 1.0f, // prawy-dolny
    -0.5f, -0.5f, 1.0f, 1.0f, 1.0f, // lewy-dolny
    -0.5f,  0.5f, 1.0f, 0.0f, 0.0f  // lewy-gorny
    };
    */

   // glBindBuffer(GL_ARRAY_BUFFER, buffer);
   // glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat)*punkty_*6, vertices, GL_STATIC_DRAW);

    // Utworzenie i skompilowanie shadera wierzchołków
    GLuint vertexShader =
        glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexSource, NULL);
    glCompileShader(vertexShader);

    // Sprawdzenie poprawności kompilacji shadera wierzchołków
    GLint status_vertex;
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &status_vertex);
   
    if (status_vertex!=GL_TRUE) //warunek sprawdzajacy poprawnosc kodu
    {
        
        char buffer[512];

        glGetProgramInfoLog(vertexShader, 512, NULL, buffer);
        std::cout << "Compilation vertexShader error: " <<buffer<< endl;

    }
    cout << "Compliation vertexShader OK " << endl;

    
   
     
    // Utworzenie i skompilowanie shadera fragmentów
    GLuint fragmentShader=
        glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentSource, NULL);
    glCompileShader(fragmentShader);
       
    
    // Sprawdzenie poprawnosci kompilacji shadera fragmentów
    GLint status_fragment;
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &status_fragment);
    if (status_fragment != GL_TRUE) {
    
        cout << "Compilation fragmentShader error: " << endl;

        char buffer[512];

        glGetProgramInfoLog(fragmentShader ,512, NULL, buffer);
        std::cout << buffer << std::endl;


        return 1;
    }
    cout << "Compilation fragmentShader OK " << endl;
    
  

    // Zlinkowanie obu shaderów w jeden wspólny program
    GLuint shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
   // glBindFragDataLocation(shaderProgram, 0, "outColor");
    glLinkProgram(shaderProgram);
    glUseProgram(shaderProgram);

    // Specifikacja formatu danych wierzchołkowych
    GLint posAttrib = glGetAttribLocation(shaderProgram, "position");
    glEnableVertexAttribArray(posAttrib);
    glVertexAttribPointer(posAttrib, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(GLfloat), 0);
    GLint colAttrib = glGetAttribLocation(shaderProgram, "color");
    glEnableVertexAttribArray(colAttrib);
    glVertexAttribPointer(colAttrib, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(GLfloat), (void*)(2 * sizeof(GLfloat)));
    //sf::Event event;

   
    // Rozpoczęcie pętli zdarzeń
    bool running = true;
    while (running) {
        sf::Event windowEvent;
        while (window.pollEvent(windowEvent)) {
            switch (windowEvent.type) 
            {
                case sf::Event::Closed:
                    running = false;
                    break;
                case sf::Event::KeyPressed:
                    switch (windowEvent.key.code)
                    {
                    case sf::Keyboard::Escape:
                        running = false;
                        break;
                        /*
                    case sf::Keyboard::Num0:
                        std::cout << "rysuje punkty" << std::endl;
                        glDrawArrays(GL_POINTS, 0, punkty_);
                        window.display();
                        break;
                    case sf::Keyboard::Num1:
                        glDrawArrays(GL_LINES, 0, punkty_);
                        window.display();
                        break;
                    case sf::Keyboard::Num2:
                        glDrawArrays(GL_LINE_STRIP, 0, punkty_);
                        window.display();
                        break;
                    case sf::Keyboard::Num3:
                        glDrawArrays(GL_LINE_LOOP, 0, punkty_);
                        window.display();
                        break;
                    case sf::Keyboard::Num4:
                        glDrawArrays(GL_TRIANGLES, 0, punkty_);
                        window.display();
                        break;
                    case sf::Keyboard::Num5:
                        glDrawArrays(GL_TRIANGLE_STRIP, 0, punkty_);
                        window.display();
                        break;
                    case sf::Keyboard::Num6:
                        glDrawArrays(GL_TRIANGLE_FAN, 0, punkty_);
                        window.display();
                        break;
                    case sf::Keyboard::Num7:
                        glDrawArrays(GL_QUADS, 0, punkty_);
                        window.display();
                        break;
                    case sf::Keyboard::Num8:
                        glDrawArrays(GL_QUAD_STRIP, 0, punkty_);
                        window.display();
                        break;
                    case sf::Keyboard::Num9:
                        glDrawArrays(GL_POLYGON, 0, punkty_);
                        window.display();
                        break;

                        */
                    case sf::Keyboard::Num1:
                        figura = GL_POINTS;
                        break;
                    case sf::Keyboard::Num0:
                        figura = GL_LINES;
                        break;
                    case sf::Keyboard::Num2:
                        figura = GL_LINE_STRIP;
                        break;
                    case sf::Keyboard::Num3:
                        figura = GL_LINE_LOOP;
                        break;
                    case sf::Keyboard::Num4:
                        figura = GL_TRIANGLES;
                        break;
                    case sf::Keyboard::Num5:
                        figura = GL_TRIANGLE_STRIP;
                        break;
                    case sf::Keyboard::Num6:
                        figura = GL_TRIANGLE_FAN;
                        break;
                    case sf::Keyboard::Num7:
                        figura = GL_QUADS;
                        break;
                    case sf::Keyboard::Num8:
                        figura = GL_QUAD_STRIP;
                        break;
                    case sf::Keyboard::Num9:
                        figura = GL_POLYGON;
                        break;
                    }
                    
                case sf::Event::MouseMoved:
                   // std::cout << "Mysza została ruszona na pozycje: ";
                   // std::cout << windowEvent.mouseMove.y << std::endl;
                    if (windowEvent.mouseMove.y > 2)           
                        punkty_ = windowEvent.mouseMove.y;
                        tworzenieFigury(vbo, punkty_);
                        std::cout << punkty_ << std::endl;
                        break;
                    
                    

                    //if(windowEvent.mouseMove.y>mouse_y)

                }
            }
        

        // Nadanie scenie koloru czarnego
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        // Narysowanie kwadratu na podstawie 6 wierzchołków (funckja rysuje 2 trójkąty równoboczne)
        glDrawArrays(figura, 0, punkty_);
        // Wymiana buforów tylni/przedni
        window.display();
    }
    

    


    // Kasowanie programu i czyszczenie buforów
    glDeleteProgram(shaderProgram);
    glDeleteShader(fragmentShader);
    glDeleteShader(vertexShader);
    glDeleteBuffers(1, &vbo);
    //glDeleteBuffers(1, &vbo);
    glDeleteVertexArrays(1, &vao);
    // Zamknięcie okna renderingu
    window.close();
    return 0;
}
